import importlib
from typing import Any, Optional

api_ready: bool
deferred_plugin_loadeds: Any
application_command_classes: Any
window_command_classes: Any
text_command_classes: Any
view_event_listener_classes: Any
view_event_listeners: Any
all_command_classes: Any
all_callbacks: Any
pending_on_activated_async_lock: Any
pending_on_activated_async_callbacks: Any
view_event_listener_excluded_callbacks: Any
text_change_listener_classes: Any
text_change_listener_callbacks: Any
text_change_listeners: Any
profile: Any

def add_profiling(event_handler: Any): ...
def trap_exceptions(event_handler: Any): ...
def decorate_handler(cls, method_name: Any) -> None: ...
def unload_module(module: Any) -> None: ...
def unload_plugin(modulename: Any) -> None: ...
def reload_plugin(modulename: Any) -> None: ...
def load_module(m: Any) -> None: ...
def synthesize_on_activated_async() -> None: ...
def notify_application_commands() -> None: ...
def create_application_commands(): ...
def create_window_commands(window_id: Any): ...
def create_text_commands(view_id: Any): ...
def on_api_ready() -> None: ...
def is_view_event_listener_applicable(cls, view: Any): ...
def create_view_event_listeners(classes: Any, view: Any) -> None: ...
def check_view_event_listeners(view: Any) -> None: ...
def attach_view(view: Any): ...

check_all_view_event_listeners_scheduled: bool

def check_all_view_event_listeners() -> None: ...
def detach_view(view: Any) -> None: ...
def find_view_event_listener(view: Any, cls: Any): ...
def attach_buffer(buf: Any) -> None: ...
def check_text_change_listeners(buf: Any) -> None: ...
def detach_buffer(buf: Any) -> None: ...
def plugin_module_for_obj(obj: Any): ...
def el_callbacks(name: Any, listener_only: bool = ...) -> None: ...
def vel_callbacks(v: Any, name: Any, listener_only: bool = ...) -> None: ...
def run_view_callbacks(name: Any, view_id: Any, *args: Any, el_only: bool = ...) -> None: ...
def run_window_callbacks(name: Any, window_id: Any, *args: Any) -> None: ...
def on_init(module: Any) -> None: ...
def on_new(view_id: Any) -> None: ...
def on_new_async(view_id: Any) -> None: ...
def on_new_buffer(buffer_id: Any) -> None: ...
def on_new_buffer_async(buffer_id: Any) -> None: ...
def on_associate_buffer(buffer_id: Any) -> None: ...
def on_associate_buffer_async(buffer_id: Any) -> None: ...
def on_close_buffer(buffer_id: Any) -> None: ...
def on_close_buffer_async(buffer_id: Any) -> None: ...
def on_clone(view_id: Any) -> None: ...
def on_clone_async(view_id: Any) -> None: ...

class Summary:
    max: float = ...
    sum: float = ...
    count: int = ...
    def __init__(self) -> None: ...
    def record(self, x: Any) -> None: ...

def get_profiling_data(): ...
def on_load(view_id: Any) -> None: ...
def on_load_async(view_id: Any) -> None: ...
def on_revert(view_id: Any) -> None: ...
def on_revert_async(view_id: Any) -> None: ...
def on_reload(view_id: Any) -> None: ...
def on_reload_async(view_id: Any) -> None: ...
def on_pre_close(view_id: Any) -> None: ...
def on_close(view_id: Any) -> None: ...
def on_pre_save(view_id: Any) -> None: ...
def on_pre_save_async(view_id: Any) -> None: ...
def on_post_save(view_id: Any) -> None: ...
def on_post_save_async(view_id: Any) -> None: ...
def on_pre_move(view_id: Any) -> None: ...
def on_post_move(view_id: Any) -> None: ...
def on_post_move_async(view_id: Any) -> None: ...
def on_modified(view_id: Any) -> None: ...
def on_modified_async(view_id: Any) -> None: ...
def on_selection_modified(view_id: Any) -> None: ...
def on_selection_modified_async(view_id: Any) -> None: ...
def on_activated(view_id: Any) -> None: ...
def on_activated_async(view_id: Any) -> None: ...
def on_deactivated(view_id: Any) -> None: ...
def on_deactivated_async(view_id: Any) -> None: ...
def on_query_context(view_id: Any, key: Any, operator: Any, operand: Any, match_all: Any): ...
def normalise_completion(c: Any): ...

class MultiCompletionList:
    remaining_calls: Any = ...
    view_id: Any = ...
    req_id: Any = ...
    completions: Any = ...
    flags: int = ...
    def __init__(self, num_completion_lists: Any, view_id: Any, req_id: Any) -> None: ...
    def completions_ready(self, completions: Any, flags: Any) -> None: ...

def on_query_completions(view_id: Any, req_id: Any, prefix: Any, locations: Any) -> None: ...
def on_hover(view_id: Any, point: Any, hover_zone: Any) -> None: ...
def on_text_command(view_id: Any, name: Any, args: Any): ...
def on_window_command(window_id: Any, name: Any, args: Any): ...
def on_post_text_command(view_id: Any, name: Any, args: Any) -> None: ...
def on_post_window_command(window_id: Any, name: Any, args: Any) -> None: ...
def on_new_project(window_id: Any) -> None: ...
def on_new_project_async(window_id: Any) -> None: ...
def on_load_project(window_id: Any) -> None: ...
def on_load_project_async(window_id: Any) -> None: ...
def on_pre_save_project(window_id: Any) -> None: ...
def on_post_save_project(window_id: Any) -> None: ...
def on_post_save_project_async(window_id: Any) -> None: ...
def on_pre_close_project(window_id: Any) -> None: ...
def on_new_window(window_id: Any) -> None: ...
def on_new_window_async(window_id: Any) -> None: ...
def on_pre_close_window(window_id: Any) -> None: ...
def on_exit(log_path: Any) -> None: ...

class CommandInputHandler:
    def name(self): ...
    def next_input(self, args: Any) -> None: ...
    def placeholder(self): ...
    def initial_text(self): ...
    def initial_selection(self): ...
    def preview(self, arg: Any): ...
    def validate(self, arg: Any): ...
    def cancel(self) -> None: ...
    def confirm(self, arg: Any) -> None: ...
    def create_input_handler_(self, args: Any): ...
    def preview_(self, v: Any): ...
    def validate_(self, v: Any, event: Any): ...
    def cancel_(self) -> None: ...
    def confirm_(self, v: Any, event: Any) -> None: ...
    def want_event(self): ...

class BackInputHandler(CommandInputHandler):
    def name(self): ...

class TextInputHandler(CommandInputHandler):
    def description(self, text: Any): ...
    def setup_(self, args: Any): ...
    def description_(self, v: Any, text: Any): ...

class ListInputHandler(CommandInputHandler):
    def list_items(self): ...
    def description(self, v: Any, text: Any): ...
    def setup_(self, args: Any): ...
    def description_(self, v: Any, text: Any): ...

class Command:
    def name(self): ...
    def is_enabled_(self, args: Any): ...
    def is_enabled(self): ...
    def is_visible_(self, args: Any): ...
    def is_visible(self): ...
    def is_checked_(self, args: Any): ...
    def is_checked(self): ...
    def description_(self, args: Any): ...
    def description(self): ...
    def filter_args(self, args: Any): ...
    def want_event(self): ...
    def input(self, args: Any) -> None: ...
    def input_description(self): ...
    def create_input_handler_(self, args: Any): ...

class ApplicationCommand(Command):
    def run_(self, edit_token: Any, args: Any): ...
    def run(self) -> None: ...

class WindowCommand(Command):
    window: Any = ...
    def __init__(self, window: Any) -> None: ...
    def run_(self, edit_token: Any, args: Any): ...
    def run(self) -> None: ...

class TextCommand(Command):
    view: Any = ...
    def __init__(self, view: Any) -> None: ...
    def run_(self, edit_token: Any, args: Any): ...
    def run(self, edit: Any) -> None: ...

class EventListener: ...

class ViewEventListener:
    @classmethod
    def is_applicable(cls, settings: Any): ...
    @classmethod
    def applies_to_primary_view_only(cls): ...
    view: Any = ...
    def __init__(self, view: Any) -> None: ...

class TextChangeListener:
    @classmethod
    def is_applicable(cls, buffer: Any): ...
    buffer: Any = ...
    def __init__(self) -> None: ...
    def detach(self) -> None: ...
    def attach(self, buffer: Any) -> None: ...
    def is_attached(self): ...

class MultizipImporter(importlib.abc.MetaPathFinder):
    loaders: Any = ...
    def __init__(self) -> None: ...
    def find_spec(self, fullname: Any, path: Any, target: Optional[Any] = ...): ...

class ZipResourceReader(importlib.abc.ResourceReader):
    loader: Any = ...
    fullname: Any = ...
    def __init__(self, loader: Any, fullname: Any) -> None: ...
    def open_resource(self, resource: Any): ...
    def resource_path(self, resource: Any) -> None: ...
    def is_resource(self, name: Any): ...
    def contents(self): ...

class ZipLoader(importlib.abc.InspectLoader):
    zippath: Any = ...
    name: Any = ...
    def __init__(self, zippath: Any) -> None: ...
    def has(self, fullname: Any): ...
    def get_resource_reader(self, fullname: Any): ...
    def get_filename(self, fullname: Any): ...
    def get_code(self, fullname: Any): ...
    def get_source(self, fullname: Any): ...
    def is_package(self, fullname: Any): ...

override_path: Any
multi_importer: Any

def update_compressed_packages(pkgs: Any) -> None: ...
def set_override_path(path: Any) -> None: ...
